library(scales)
library(ggplot2)
library(dplyr)
library(lme4)
library(effects)
library(effectsize)
library(margins)


setwd('D:\\my research\\tiktok harvard\\code_for_rep\\tiktok_comment_MH\\case 1')
set.seed(1)


dm2 = read.csv('tt_comment_mo_0316.csv')
dm1 = read.csv('tt_comment_cm_0316.csv')

small_res_print(vary='kc1', varx='treatment', dm2=dm1%>%filter(theme_any_bi=='Yes'))


nl2 <- dm2 %>%
  group_by(video_ID) %>%
  select(video_eng1, video_eng2, video_eng3, ttfollow, c_engage, prepost_v2, treatment, 
         issue_in_view,small_sample, video_ID, video_time) %>% distinct()

nl22 = dm2 %>%
  group_by(video_ID) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 

nl = merge(nl2, nl22, by='video_ID')

nl1 <- dm1 %>%
  mutate(across(c(video_eng1, video_eng2, video_eng3, ttfollow, c_engage), ~ round(.x, 7))) %>%
  group_by(video_ID) %>%
  select(video_eng1, video_eng2, video_eng3, ttfollow, c_engage, prepost_v2, treatment, 
         issue_in_view,small_sample, video_ID, video_time) %>% distinct()

nl12 = dm1 %>%
  group_by(video_ID) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 

nl1 = merge(nl1, nl12, by='video_ID')

## draw plot from amit
nl1%>%filter(treatment=='Control')%>%summarise(n())
nl%>%filter(treatment=='Control')%>%summarise(n())

nla = rbind(nl, nl1%>%filter(treatment=='C+M'))
dla = rbind(dm2, dm1%>%filter(treatment=='C+M'))

nla$video_time <- as.POSIXct(nla$video_time, format = "%Y-%m-%d",tz="UTC")
nla$video_time_day <- as.Date(nla$video_time)

dla$video_time <- as.POSIXct(dla$video_time, format = "%Y-%m-%d",tz="UTC")
dla$video_time_day <- as.Date(dla$video_time)

nlb = nla %>% group_by(video_time_day,treatment) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 
dlb = dla %>% group_by(video_time_day,treatment) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 

dla$video_week <- cut(dla$video_time, breaks = "week")
dla$video_week <- as.Date(dla$video_week) 
dlc = dla %>% group_by(video_week,treatment) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 

library(zoo)
library(merTools)
nlb_ma <- nlb %>%
  arrange(treatment, video_time_day) %>%
  group_by(treatment) %>%
  mutate(kc1_ma3 = rollmean(kc1, k = 7, align = "right", fill = NA)) %>%
  ungroup()

nla$video_week <- cut(nla$video_time, breaks = "week")
nla$video_week <- as.Date(nla$video_week) 
nlc = nla %>% group_by(video_week,treatment) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 

dla <- within(dla, treatment  <- relevel(as.factor(treatment), ref='Control'))
dla <- within(dla, video_time_day  <- as.factor(video_time_day))
dla <- within(dla, video_week  <- as.factor(video_week))


## estimate the prevalence outcome

library(purrr)

# Get a vector of all unique days
all_days <- sort(unique(dla$video_time_day))

# Function to fit model per day
fit_day_model <- function(day_data) {
  model <- glmer(
    kc1 ~ treatment + (1 | creator_ID/video_ID),
    data = day_data,
    family = binomial(link = "logit")
  )
  
  # Extract fixed effects and convert to probabilities
  coefs <- fixef(model)
  vcov_mat <- vcov(model)
  logodds_list <- list(
    control = list(mean = coefs[1], se = sqrt(vcov_mat[1, 1])),
    MO = if ("treatmentMO" %in% names(coefs)) {
      list(
        mean = coefs[1] + coefs["treatmentMO"],
        se = sqrt(vcov_mat[1, 1] + vcov_mat["treatmentMO", "treatmentMO"] + 2 * vcov_mat[1, "treatmentMO"])
      )
    } else NULL,
    CM = if ("treatmentC+M" %in% names(coefs)) {
      list(
        mean = coefs[1] + coefs["treatmentC+M"],
        se = sqrt(vcov_mat[1, 1] + vcov_mat["treatmentC+M", "treatmentC+M"] + 2 * vcov_mat[1, "treatmentC+M"])
      )    } else NULL
  )

  results <- map_dfr(names(logodds_list), function(treat) {
    info <- logodds_list[[treat]]
    if (is.null(info)) return(NULL)
    
    data.frame(
      date = unique(day_data$video_time_day),
      treatment = treat,
      prevalence = plogis(info$mean),
      se = info$se,
      n = dim(day_data)[1],
      lower = plogis(info$mean - 1.96 * info$se),
      upper = plogis(info$mean + 1.96 * info$se)
    )
  })
  
  return(results)
}

# Apply to each day
daily_preds <- dla %>% #filter(video_time_day %in% c('2023-03-01', '2023-03-02', '2023-03-27')) %>%
  group_by(video_time_day) %>%
  group_split() %>%
  map_dfr(fit_day_model)

daily_preds$date = as.Date(daily_preds$date)
daily_preds <- within(daily_preds, treatment  <- as.factor(treatment))
daily_preds$treatment <- factor(daily_preds$treatment, levels = c("Control", "CM", 'MO'))
daily_preds$treatment[is.na(daily_preds$treatment)] <- "Control"
daily_preds = daily_preds %>% filter(n>5) %>% filter(prevalence < max(daily_preds$prevalence))
g = ggplot(daily_preds%>%
             filter(date >= as.Date("2023-03-01") & date <= as.Date("2023-05-31"))
           , aes(x = date, y = prevalence, color = treatment, size=n, fill=treatment)) +
  #geom_line() +
  geom_point(alpha=0.6, shape=16) +
  geom_smooth(se = T, method = "loess", aes(color = treatment, fill=treatment, weight=n), 
              fullrange=T, span=1, show.legend=F, alpha=0.5)+
  geom_vline(xintercept = as.Date(c("2023-04-08", "2023-04-15", "2023-04-25")), 
             linetype = "dotted", color = "black", size=0.8) +
  geom_vline(xintercept = as.Date(c("2023-05-02")), 
             linetype = "dashed", color = "black", size=0.7) +
  scale_color_manual(
    values = c("Control" = "gray60", "MO" = "darkorange", "CM" = "steelblue")
  ) +
  scale_fill_manual(
    values = c("Control" = "gray80", "MO" = "orange", "CM" = "lightblue")
  ) +
  scale_size(range = c(0.2, 4)) + 
  scale_x_date(
    limits = as.Date(c("2023-03-01", "2023-05-31")),
    breaks = seq(as.Date("2023-03-01"), as.Date("2023-05-31"), by = "10 days"),
    labels = scales::date_format("%m/%d"),
    #date_breaks = "week",
    #date_labels = "%m/%d",
    expand = c(0.01,0),
    #limits = as.Date(c("2023-03-01", "2023-05-31"))
  ) + 
  #coord_cartesian(xlim = as.Date(c("2023-03-01", "2023-05-31")))+
  scale_y_continuous(limits = c(0, 0.7),
                     breaks = seq(0, 0.6, by = 0.1), expand=c(0,0),
                     labels = scales::label_percent(accuracy = 1))+ annotate("text", x = as.Date("2023-04-08"), y = 0.68, label = "Toolkit 1", angle = 90, vjust = -0.5, size = 3) +
  annotate("text", x = as.Date("2023-04-15"), y = 0.68, label = "Toolkit 2", angle = 90, vjust = -0.5, size = 3) +
  annotate("text", x = as.Date("2023-04-25"), y = 0.68, label = "Toolkit 3", angle = 90, vjust = -0.5, size = 3) +
  annotate("text", x = as.Date("2023-05-02"), y = 0.68, label = "Reminder",  angle = 90, vjust = -0.5, size = 3)+
  labs(
    title = "Estimated prevalence of foundational KC with 95% CI by day and treatment",
    x = "Date",
    y = "Estimated Prevalence of foundational KC",
    color = "Intervention",
    fill = "Intervention",
    size='Number of comments'
  ) +
  theme_minimal(base_size = 12) +
  theme(
    #panel.grid.major.x = element_blank(),  # Remove major horizontal grid lines
    panel.grid.minor.x = element_blank(),  # Remove minor horizontal grid lines
    panel.grid.minor.y = element_blank(),  # Remove minor horizontal grid lines
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centered title
    axis.title = element_text(size = 13, face = "bold"),  
    axis.text.x = element_text(angle = 0, vjust = 2, hjust = 0.5,size = 9),
    axis.text.y = element_text(angle = 0, vjust = 0, hjust = 1.5,size = 9),
  
    legend.text = element_text(size = 12),  
    legend.title = element_text(size = 12),
    panel.border = element_rect(color = "grey", fill = NA, linewidth = 0.5)
  )
g
ggsave('kc1_by_time_plot.jpg', g, width = 10, height = 6, units = "in", dpi = 300)


model <- glmer(kc1 ~ treatment * video_week + (1 | creator_ID/video_ID), 
               family = binomial(link = "logit"), 
               data = dla)

new_data <- expand.grid(
  treatment = unique(dla$treatment),
  video_week = unique(dla$video_week)
)
new_data$treatment <- factor(new_data$treatment, levels = levels(dla$treatment))
new_data$video_time_day <- factor(new_data$time, levels = levels(dla$video_time_day))  # if time is categorical
new_data$predicted_prob <- predict(model, newdata = new_data, type = "response", re.form = NA)
preds <- predictInterval(
  model,
  newdata = new_data,
  level = 0.95,
  n.sims = 1000,
  stat = "mean",
  type = "probability",  # ensures output is on the probability scale
  include.resid.var = FALSE
)
new_data_with_ci <- cbind(new_data, preds)


library(geepack)

gee_model <- geeglm(
  kc1 ~ treatment * video_time_day,
  id = video_ID,  # or creator_id if thatâ€™s the highest level
  family = binomial(link = "logit"),
  data = dla,
  corstr = "exchangeable"
)

ggplot(new_data, aes(x = time, y = predicted_prob, color = treatment, group = treatment)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(
    title = "Predicted Prevalence of Outcome by Treatment over Time",
    x = "Time",
    y = "Estimated Prevalence",
    color = "Treatment"
  ) +
  theme_minimal()
intercept_logodds <- fixef(model)[1]
prevalence <- plogis(intercept_logodds)
print(prevalence)

ggplot(new_data_with_ci, aes(x = time, y = fit, color = treatment, group = treatment)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  geom_ribbon(aes(ymin = lwr, ymax = upr, fill = treatment), alpha = 0.2, color = NA) +
  labs(
    title = "Predicted Prevalence of Outcome by Treatment over Time",
    x = "Time",
    y = "Estimated Prevalence",
    color = "Treatment",
    fill = "Treatment"
  ) +
  theme_minimal()

ggplot(nlc, aes(x = video_time_day, y = kc1, color = treatment)) +
  geom_line(alpha = 0.7) +
  geom_vline(xintercept = as.Date(c("2023-04-08", "2023-04-15", "2023-04-25", "2023-05-02")), 
             linetype = "dashed", color = "black") +
  labs(
    title = "KC over Video Time by Group",
    x = "Video Time",
    y = "KC",
    color = "Group"
  ) +
  theme_minimal()

ggplot(dlb, aes(x = video_time_day, y = kc1, color = treatment)) +
  geom_point(alpha = 0.7) +
  geom_smooth(se = T, method = "loess")+
  geom_vline(xintercept = as.Date(c("2023-04-08", "2023-04-15", "2023-04-25", "2023-05-02")), 
             linetype = "dashed", color = "black") +
  labs(
    title = "Foundational knowledge construction over Video Time by Group",
    x = "Video Time",
    y = "KC",
    color = "Group"
  ) +
  theme_minimal()

ggplot(dlb, aes(x = video_time_day, y = kc2, color = treatment)) +
  geom_point(alpha = 0.7) +
  geom_smooth(se = T, method = "loess")+
  geom_vline(xintercept = as.Date(c("2023-04-08", "2023-04-15", "2023-04-25", "2023-05-02")), 
             linetype = "dashed", color = "black") +
  labs(
    title = "KC over Video Time by Group",
    x = "Video Time",
    y = "KC",
    color = "Group"
  ) +
  theme_minimal()


ggplot(nlb_ma, aes(x = video_time_day, y = kc1_ma3, color = treatment)) +
  geom_line(alpha = 0.7) +
  geom_vline(xintercept = as.Date(c("2023-04-08", "2023-04-15", "2023-04-25", "2023-05-02")), 
             linetype = "dashed", color = "black") +
  labs(
    title = "KC over Video Time by Group",
    x = "Video Time",
    y = "KC",
    color = "Group"
  ) +
  theme_minimal()

ggplot(nlc, aes(x = video_week, y = kc1, color = treatment)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  #geom_smooth(se = FALSE, method = "loess")+
  geom_vline(xintercept = as.Date(c("2023-04-08", "2023-04-15", "2023-04-25", "2023-05-02")), 
             linetype = "dashed", color = "black") +
  labs(
    title = "Daily KC1 Levels by Treatment Group",
    x = "Date",
    y = "KC1",
    color = "Treatment Group"
  ) +
  theme_minimal() +
  scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(nlb, aes(x = video_time_day, y = kc1, color = treatment)) +
  geom_line(size = 0.6) +
  #geom_point(size = 2) +
  #geom_smooth(se = FALSE, method = "loess")+
  geom_vline(xintercept = as.Date(c("2023-04-08", "2023-04-15", "2023-04-25", "2023-05-02")), 
             linetype = "dashed", color = "black") +
  labs(
    title = "Daily KC1 Levels by Treatment Group",
    x = "Date",
    y = "KC1",
    color = "Treatment Group"
  ) +
  theme_minimal() +
  scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggplot(nlb, aes(x = video_time_day, y = kc1, color = treatment)) +
  #geom_line(size = 0.6) +
  geom_point(size = 1) +
  geom_smooth(se = TRUE, method = "gam")+
  geom_vline(xintercept = as.Date(c("2023-04-08", "2023-04-15", "2023-04-25", "2023-05-02")), 
             linetype = "dashed", color = "black") +
  labs(
    title = "Daily KC1 Levels by Treatment Group",
    x = "Date",
    y = "KC1",
    color = "Treatment Group"
  ) +
  theme_minimal() +
  scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


dm1_filtered <- dm2 %>%
  filter(video_time >= as.Date("2023-05-01") & video_time <= as.Date("2023-05-15"))
small_res_print(vary='kc1', varx='treatment', dm2=dm1_filtered)

##### draw plot form maurcie

lm_res_df_add= data.frame()
mm_res_df_add= data.frame()

mm_res_df = read.csv('tt_new_res_for_AME_plot_0321_4.csv')



var = 'video_eng1'
xname = 'video comment-to-view ratio'
min_or_mean = 'min_bin'
step = 0.018 # 0.018 is also good
save_name=paste0("plot_video_smooth_ame_", step)
tmp = get_raw_plot1(nl=nl, var=var,xname=xname, step=step, min_or_mean=min_or_mean)
res3 = get_mlm_moderation_res_sep(vary='kc1', varx='treatment', varm=var, 
                              mod_c=c(min(tmp%>%select(!!sym(min_or_mean)))+0.00001, max(tmp%>%select(!!sym(min_or_mean)))), 
                              dm2=dm2)
mm_res_df_add = res3$mm
plot_fancy(tmp=tmp, mm_res_df=mm_res_df, mm_res_df_add=mm_res_df_add,
           var=var, xname=xname, min_or_mean=min_or_mean, save_name=save_name)

var = 'video_eng1'
xname = 'video comment-to-view ratio'
min_or_mean = 'min_bin'
step = 0.015 # 0.018 is also good
save_name=paste0("plot_video_smooth_ame_", step)
tmp = get_raw_plot1(nl=nl, var=var,xname=xname, step=step, min_or_mean=min_or_mean)
res3 = get_mlm_moderation_res_sep(vary='kc1', varx='treatment', varm=var, 
                                  mod_c=c(min(tmp%>%select(!!sym(min_or_mean)))+0.00001, max(tmp%>%select(!!sym(min_or_mean)))), 
                                  dm2=dm2)
mm_res_df_add = res3$mm
plot_fancy(tmp=tmp, mm_res_df=mm_res_df, mm_res_df_add=mm_res_df_add,
           var=var, xname=xname, min_or_mean=min_or_mean, save_name=save_name)


var = 'video_eng3'
xname = 'video like-to-view ratio'
min_or_mean = 'min_bin'
step = 0.012
save_name=paste0("plot_video_smooth_ame_", step)
tmp = get_raw_plot1(nl=nl, var=var,xname=xname, step=step, min_or_mean=min_or_mean)
res3 = get_mlm_moderation_res_sep(vary='kc1', varx='treatment', varm=var, 
                                  mod_c=c(min(tmp%>%select(!!sym(min_or_mean)))+0.00001, max(tmp%>%select(!!sym(min_or_mean)))), 
                                  dm2=dm2)
mm_res_df_add = res3$mm
plot_fancy(tmp=tmp, mm_res_df=mm_res_df, mm_res_df_add=mm_res_df_add,
           var=var, xname=xname, min_or_mean=min_or_mean, save_name=save_name)


var = 'video_eng2'
xname = 'video share-to-view ratio'
min_or_mean = 'mean_bin'
step = 0.015
save_name=paste0("plot_video_smooth_ame_", step)
tmp = get_raw_plot1(nl=nl, var=var,xname=xname, step=step, min_or_mean=min_or_mean)
res3 = get_mlm_moderation_res_sep(vary='kc1', varx='treatment', varm=var, 
                                  mod_c=c(min(tmp%>%select(!!sym(min_or_mean)))+0.00001, max(tmp%>%select(!!sym(min_or_mean)))), 
                                  dm2=dm2)
mm_res_df_add = res3$mm
plot_fancy(tmp=tmp, mm_res_df=mm_res_df, mm_res_df_add=mm_res_df_add,
           var=var, xname=xname, min_or_mean=min_or_mean, save_name=save_name)




get_raw_plot1 = function(nl, var, xname, step, min_or_mean, prob_seg=seq(0.1, 0.9, by = 0.2)){
  dm2s1 <- nl %>% filter(treatment=='MO' & issue_in_view==0 & small_sample==0) %>%
    mutate(bin = cut(!!sym(var), breaks = unique(quantile(nl[[var]], probs = c(0, seq(0, 1, by = step), 1), na.rm = TRUE)), 
                     right=T, include.lowest = TRUE)) %>%
    group_by(bin, prepost_v2) %>%
    summarise(
      mean_kc1 = mean(kc1, na.rm = TRUE),
      n = sum(n),
      .groups = "drop"
    )
  dm2s2 <- dm2s1 %>%
    group_by(bin) %>%
    filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
    ungroup()
  print(sum(dm2s2$n))
  print(sum(dm2s1$n))
  dm2s3 <- nl %>% filter(treatment=='Control'& issue_in_view==0 & small_sample==0) %>%
    mutate(bin = cut(!!sym(var), breaks = unique(quantile(nl[[var]], probs = c(0, seq(0, 1, by = step), 1), na.rm = TRUE)), include.lowest = TRUE)) %>%
    group_by(bin, prepost_v2) %>%
    summarise(
      mean_kc1 = mean(kc1, na.rm = TRUE),
      n = sum(n),
      .groups = "drop"
    )
  dm2s4 <- dm2s3 %>%
    group_by(bin) %>%
    filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
    ungroup()
  print(sum(dm2s4$n))
  print(sum(dm2s3$n))
  
  tmp1 = merge(dm2s2 %>% filter(prepost_v2=='pre') %>% rename(kc1_pre = mean_kc1, n_pre = n),
               dm2s2 %>% filter(prepost_v2=='post') %>% rename(kc1_post = mean_kc1, n_post = n),
               by='bin')
  tmp1 = tmp1 %>% mutate(kc1_diff = kc1_post-kc1_pre)
  
  tmp1 <- tmp1 %>%
    mutate(
      bin=as.character(bin),
      min_bin = sapply(bin, function(x) {
        strsplit(substr(x, 2, nchar(x)), ",")[[1]][1]}),
      min_bin = as.numeric(min_bin),
      max_bin = sapply(bin, function(x) {
        substr(strsplit(x, ",")[[1]][2], 1, nchar(strsplit(x, ",")[[1]][2]) - 1)}),
      max_bin = as.numeric(max_bin),
      mean_bin = (min_bin+max_bin)/2
    )
  
  tmp1 = tmp1 %>% mutate(nall = n_pre+n_post, group = 'MO')%>% arrange(min_bin)
  
  tmp2 = merge(dm2s4 %>% filter(prepost_v2=='pre') %>% rename(kc1_pre = mean_kc1, n_pre = n),
               dm2s4 %>% filter(prepost_v2=='post') %>% rename(kc1_post = mean_kc1, n_post = n),
               by='bin')
  tmp2 = tmp2 %>% mutate(kc1_diff = kc1_post-kc1_pre)
  tmp2 <- tmp2 %>%
    mutate(
      bin=as.character(bin),
      min_bin = sapply(bin, function(x) {
        strsplit(substr(x, 2, nchar(x)), ",")[[1]][1]}),
      min_bin = as.numeric(min_bin),
      max_bin = sapply(bin, function(x) {
        substr(strsplit(x, ",")[[1]][2], 1, nchar(strsplit(x, ",")[[1]][2]) - 1)}),
      max_bin = as.numeric(max_bin),
      mean_bin = (min_bin+max_bin)/2
    )
  tmp2 = tmp2 %>% mutate(nall = n_pre+n_post, group='Control')%>% arrange(min_bin)
  
  tmp = rbind(tmp1, tmp2)
  
  summary(tmp$nall)
  unique(tmp$nall)
  
  tmp <- tmp %>%
    mutate(size_var = case_when(
      nall < 50 ~ 1,
      nall >= 50 & nall < 250 ~ 1.5,
      nall >= 250 & nall < 500 ~ 2,
      nall >= 500 & nall < 750 ~ 3.5,
      nall >= 750 & nall < 1000 ~ 5,
      nall >= 1000 ~ 6.5
    ))
  
  return(tmp)
}

plot_fancy = function(tmp, mm_res_df, mm_res_df_add, var, xname, min_or_mean, save_name){
  
  mmd0 = rbind(mm_res_df %>% filter(m==var),
              mm_res_df_add %>% filter(m==var))
  
  mmd = mmd0 %>% distinct(moderation, intervention,.keep_all = TRUE) %>% 
    filter(intervention=='MO') %>%
    filter(moderation <= max(tmp%>%select(!!sym(min_or_mean)), na.rm=T)) %>%
    filter(moderation >= min(tmp%>%select(!!sym(min_or_mean)), na.rm=T)+0.00001)
  
  mmd2 = mmd0 %>% distinct(moderation, intervention,.keep_all = TRUE) %>% 
    filter(intervention=='Control') %>%
    filter(moderation <= max(tmp%>%select(!!sym(min_or_mean)), na.rm=T)) %>%
    filter(moderation >= min(tmp%>%select(!!sym(min_or_mean)), na.rm=T)+0.00001)
  
  g= ggplot(tmp, aes(x = !!sym(min_or_mean)+0.00001, y = kc1_diff, size = size_var, color = group)) +
    geom_point(alpha = 0.4) +
    scale_x_log10(labels = scales::comma) +  
    #geom_smooth(method = "lm", aes(color = group, weight=nall), se = F, fullrange=T, span=1.5, show.legend=F)+
    geom_hline(yintercept = 0, linetype = "dashed", color = "black", linewidth = 0.5, alpha=0.7) +
    scale_size_continuous(#range = c(1, 6),
                          #breaks=c(5, 10,20,30,40,50,60,70,80),
                          labels=c('<50', '50-249', '250-499', '500-749', '750-999', '>1,000')
    ) +
    scale_color_manual(values = c("MO" = "darkorange", "Control" = "grey")) +
    
    # Add ribbon for upper/lower bound
    geom_ribbon(data = mmd, 
                aes(x = moderation, ymin = lower, ymax = upper), 
                inherit.aes = FALSE, fill = "darkorange", alpha = 0.35) +
    
    # Add line for predicted effect
    geom_line(data = mmd, 
              aes(x = moderation, y = AME), 
              inherit.aes = FALSE, color = "darkorange", linewidth = 1.5) +
    
    # Add ribbon for upper/lower bound
    geom_ribbon(data = mmd2, 
                aes(x = moderation, ymin = lower, ymax = upper), 
                inherit.aes = FALSE, fill = "grey", alpha = 0.35) +
    
    # Add line for predicted effect
    geom_line(data = mmd2, 
              aes(x = moderation, y = AME), 
              inherit.aes = FALSE, color = "grey", linewidth = 1.5) +
    
    
    labs(x = capitalize_first(xname), y = "Change in proportion of outcome (Post-Pre)", size = "Number of comments", color='Intervention',
         title = paste0("Differences in proportion of foundational KC by ", xname)) +
    theme_minimal(base_size = 12) +
    theme(
      #panel.grid.major.x = element_blank(),  # Remove major horizontal grid lines
      #panel.grid.minor.x = element_blank(),  # Remove minor horizontal grid lines
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centered title
      axis.title = element_text(size = 13, face = "bold"),  
      axis.text = element_text(size = 12),  
      legend.text = element_text(size = 12),  
      legend.title = element_text(size = 12),
      panel.border = element_rect(color = "grey", fill = NA, linewidth = 0.5)
    )
  
  g
  
  ggsave(paste0(save_name, xname, ".png"), g, width = 10, height = 6, units = "in", dpi = 300)
  

  return(g)
  
}




############ do the by creator 

var = 'c_engage'
xname = 'creator engage'
min_or_mean = 'mean_bin'
step = 0.01


cl <- dm2 %>%
  group_by(creator_ID) %>%
  select(ttfollow, c_engage, prepost_v2, treatment, creator_ID) %>% distinct()

cl1 <- cl %>%
  group_by(creator_ID) %>%
  filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
  ungroup()

length(unique(dm2$creator_ID))

cl2 = dm2 %>%
  group_by(creator_ID, prepost_v2) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 

cl3 <- cl2 %>%
  group_by(creator_ID) %>%
  filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
  ungroup()

cl = merge(cl1, cl3, by=c('creator_ID', 'prepost_v2'))


## creator level
dm2s1 <- cl %>% filter(treatment=='MO') %>%
  group_by(c_engage, prepost_v2) %>%
  summarise(
    mean_kc1 = mean(kc1, na.rm = TRUE),
    n = sum(n),
    .groups = "drop"
  )
dm2s2 <- dm2s1 %>%
  group_by(c_engage) %>%
  filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
  ungroup()
dm2s3 <- cl %>% filter(treatment=='Control') %>%
  group_by(c_engage, prepost_v2) %>%
  summarise(
    mean_kc1 = mean(kc1, na.rm = TRUE),
    n = sum(n),
    .groups = "drop"
  )
dm2s4 <- dm2s3 %>%
  group_by(c_engage) %>%
  filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
  ungroup()

tmp1 = merge(dm2s2 %>% filter(prepost_v2=='pre') %>% rename(kc1_pre = mean_kc1, n_pre = n),
             dm2s2 %>% filter(prepost_v2=='post') %>% rename(kc1_post = mean_kc1, n_post = n),
             by='c_engage')
tmp1 = tmp1 %>% mutate(kc1_diff = kc1_post-kc1_pre)
tmp1 = tmp1 %>% mutate(nall = n_pre+n_post, group = 'MO')%>% arrange(c_engage)

tmp2 = merge(dm2s4 %>% filter(prepost_v2=='pre') %>% rename(kc1_pre = mean_kc1, n_pre = n),
             dm2s4 %>% filter(prepost_v2=='post') %>% rename(kc1_post = mean_kc1, n_post = n),
             by='c_engage')
tmp2 = tmp2 %>% mutate(kc1_diff = kc1_post-kc1_pre)
tmp2 = tmp2 %>% mutate(nall = n_pre+n_post, group='Control')%>% arrange(c_engage)

tmp = rbind(tmp1, tmp2)

#tmp = tmp %>% filter(nall>=50)

xname = 'creator enegagement rate'

tmp <- tmp %>%
  mutate(size_var = case_when(
    nall < 100 ~ 1,
    nall >= 100 & nall < 500 ~ 2,
    nall >= 500 & nall < 1000 ~ 3,
    nall >= 1000 & nall < 5000 ~ 4,
    nall >= 5000 & nall < 20000 ~ 5,
    nall >= 20000 ~ 6
  ))

capitalize_first <- function(x) {
  paste0(toupper(substr(x, 1, 1)), tolower(substr(x, 2, nchar(x))))
}


mmd = mm_res_df %>% filter(m=='c_engage') %>% filter(intervention=='MO') %>%
  filter(moderation <= max(tmp%>%select(c_engage), na.rm=T)) %>%
  filter(moderation >= min(tmp%>%select(c_engage), na.rm=T))
mmd2 = mm_res_df %>% filter(m=='c_engage') %>% filter(intervention=='Control') %>%
  filter(moderation <= max(tmp%>%select(c_engage), na.rm=T)) %>%
  filter(moderation >= min(tmp%>%select(c_engage), na.rm=T))
g= ggplot(tmp, aes(x = c_engage, y = kc1_diff, size = size_var, color = group)) +
  geom_point(alpha = 0.4) +
  scale_x_log10(labels=scales::comma) +  
  geom_hline(yintercept = 0, linetype = "dashed", color = "black", linewidth = 0.5, alpha=0.7) +
  scale_size_continuous(#range = c(3, 6),
                        #breaks=c(5, 10,20,30,40,50,60,70,80),
                        labels=c('<100', '100-499', '500-999', '1,000-4,999', '5,000-19,999', '>20,000')
  ) +
  scale_color_manual(values = c("MO" = "darkorange", "Control" = "grey")) +
  # Add ribbon for upper/lower bound
  geom_ribbon(data = mmd, 
              aes(x = moderation, ymin = lower, ymax = upper), 
              inherit.aes = FALSE, fill = "darkorange", alpha = 0.35) +
  
  # Add line for predicted effect
  geom_line(data = mmd, 
            aes(x = moderation, y = AME), 
            inherit.aes = FALSE, color = "darkorange", linewidth = 1.5) +
  
  # Add ribbon for upper/lower bound
  geom_ribbon(data = mmd2, 
              aes(x = moderation, ymin = lower, ymax = upper), 
              inherit.aes = FALSE, fill = "grey", alpha = 0.35) +
  
  # Add line for predicted effect
  geom_line(data = mmd2, 
            aes(x = moderation, y = AME), 
            inherit.aes = FALSE, color = "grey", linewidth = 1.5) +
  
  labs(x = capitalize_first(xname), y = "Change in proportion of outcome (Post-Pre)", size = "Number of Comments", color='Intervention',
       title = paste0("Differences in proportion of foundational KC by ", xname)) +
  theme_minimal(base_size = 12) +
  theme(
    #panel.grid.major.x = element_blank(),  # Remove major horizontal grid lines
    #panel.grid.minor.x = element_blank(),  # Remove minor horizontal grid lines
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centered title
    axis.title = element_text(size = 13, face = "bold"),  
    axis.text = element_text(size = 12),  
    legend.text = element_text(size = 12),  
    legend.title = element_text(size = 12),
    panel.border = element_rect(color = "grey", fill = NA, linewidth = 0.5)
  )

g

ggsave(paste0("plot_video_smooth_", xname, ".png"), g, width = 10, height = 6, units = "in", dpi = 300)


############ do the by creator -- ttfollower counts

var = 'ttfollow'
xname = 'creator follower counts'
step = 0.01


cl <- dm2 %>%
  group_by(creator_ID) %>%
  select(ttfollow, c_engage, prepost_v2, treatment, creator_ID) %>% distinct()

cl1 <- cl %>%
  group_by(creator_ID) %>%
  filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
  ungroup()

length(unique(dm2$creator_ID))

cl2 = dm2 %>%
  group_by(creator_ID, prepost_v2) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 

cl3 <- cl2 %>%
  group_by(creator_ID) %>%
  filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
  ungroup()

cl = merge(cl1, cl3, by=c('creator_ID', 'prepost_v2'))


## creator level
dm2s1 <- cl %>% filter(treatment=='MO') %>%
  group_by(ttfollow, prepost_v2) %>%
  summarise(
    mean_kc1 = mean(kc1, na.rm = TRUE),
    n = sum(n),
    .groups = "drop"
  )
dm2s2 <- dm2s1 %>%
  group_by(ttfollow) %>%
  filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
  ungroup()
dm2s3 <- cl %>% filter(treatment=='Control') %>%
  group_by(ttfollow, prepost_v2) %>%
  summarise(
    mean_kc1 = mean(kc1, na.rm = TRUE),
    n = sum(n),
    .groups = "drop"
  )
dm2s4 <- dm2s3 %>%
  group_by(ttfollow) %>%
  filter(n_distinct(prepost_v2) == 2) %>%  # Ensure both subgroups exist in the bin
  ungroup()
length(unique(dm2$ttfollow))
length(unique(dm2$creator_ID))

tmp1 = merge(dm2s2 %>% filter(prepost_v2=='pre') %>% rename(kc1_pre = mean_kc1, n_pre = n),
             dm2s2 %>% filter(prepost_v2=='post') %>% rename(kc1_post = mean_kc1, n_post = n),
             by='ttfollow')
tmp1 = tmp1 %>% mutate(kc1_diff = kc1_post-kc1_pre)
tmp1 = tmp1 %>% mutate(nall = n_pre+n_post, group = 'MO')%>% arrange(ttfollow)

tmp2 = merge(dm2s4 %>% filter(prepost_v2=='pre') %>% rename(kc1_pre = mean_kc1, n_pre = n),
             dm2s4 %>% filter(prepost_v2=='post') %>% rename(kc1_post = mean_kc1, n_post = n),
             by='ttfollow')
tmp2 = tmp2 %>% mutate(kc1_diff = kc1_post-kc1_pre)
tmp2 = tmp2 %>% mutate(nall = n_pre+n_post, group='Control')%>% arrange(ttfollow)

tmp = rbind(tmp1, tmp2)

#tmp = tmp %>% filter(nall>=50)

xname = 'creator follower counts'

tmp <- tmp %>%
  mutate(size_var = case_when(
    nall < 100 ~ 1,
    nall >= 100 & nall < 500 ~ 2,
    nall >= 500 & nall < 1000 ~ 3,
    nall >= 1000 & nall < 5000 ~ 4,
    nall >= 5000 & nall < 20000 ~ 5,
    nall >= 20000 ~ 6
  ))

capitalize_first <- function(x) {
  paste0(toupper(substr(x, 1, 1)), tolower(substr(x, 2, nchar(x))))
}


g= ggplot(tmp, aes(x = ttfollow, y = kc1_diff, size = size_var, color = group)) +
  geom_point(alpha = 0.4) +
  scale_x_log10(labels = scales::comma) +  
  geom_smooth(method = "lm", aes(color = group, weight=nall), se = F, fullrange=T, span=1.5, show.legend=F)+
  geom_hline(yintercept = 0, linetype = "dashed", color = "black", linewidth = 0.5, alpha=0.7) +
  scale_size_continuous(#range = c(3, 6),
    #breaks=c(5, 10,20,30,40,50,60,70,80),
    labels=c('<100', '100-499', '500-999', '1,000-4,999', '5,000-19,999', '>20,000')
  ) +
  scale_color_manual(values = c("MO" = "darkorange", "Control" = "grey")) +
  labs(x = capitalize_first(xname), y = "Change in proportion of outcome (Post-Pre)", size = "Number of Comments", color='Intervention',
       title = paste0("Differences in proportion of foundational KC by ", xname)) +
  theme_minimal(base_size = 12) +
  theme(
    #panel.grid.major.x = element_blank(),  # Remove major horizontal grid lines
    #panel.grid.minor.x = element_blank(),  # Remove minor horizontal grid lines
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centered title
    axis.title = element_text(size = 13, face = "bold"),  
    axis.text = element_text(size = 12),  
    legend.text = element_text(size = 12),  
    legend.title = element_text(size = 12),
    panel.border = element_rect(color = "grey", fill = NA, linewidth = 0.5)
  )

g

ggsave(paste0("plot_video_smooth_", xname, ".png"), g, width = 10, height = 6, units = "in", dpi = 300)


## jitter plot -- estimate the theme anly effects
vary = 'kc1'
varx = 'treatment'
varm = 'theme_any_bi'
mod_c = c('Yes', 'No')
res4 = get_mlm_moderation_res_sep_theme(vary=vary, varx=varx, varm=varm, mod_c=mod_c, dm2=dm2)
mm_res = res4$mm

mm_res = mm_res %>% drop_na()

get_mlm_moderation_res_sep_theme <- function(vary, varx, varm, mod_c, dm2){
  
  
  ## dm2
  col_select_l = c(vary, varx, varm, 'prepost_v2', 'creator_ID', 'video_ID')
  df = dm2 %>% dplyr::select(all_of(col_select_l))
  colnames(df) = c('y', 'intervention',  'moderation','prepost_v2', 'TTID', 'VID')
  
  ## three level
  model = lmer(formula = y ~ 1 + intervention*prepost_v2*moderation + (1 |TTID) + (1|TTID:VID), data = df)
  #print(summary(model))
  #margin_no = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
  #                                                             moderation = c('No')))
  #margin_yes = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
  #                                                              moderation = c('Yes')))
  
  #std_m = effectsize::standardize_parameters(model)
  lm_df = as.data.frame(summary(model)$coefficients)
  #lm_df = cbind(lm_df, data.frame(std_m)[,c('Std_Coefficient', 'CI_low', 'CI_high')])
  #lm_df['std_SE'] = attr(std_m, 'standard_error')
  lm_df$var = row.names(lm_df)
  lm_df$video_var = as.data.frame(VarCorr(model))['vcov'][1,]
  lm_df$creator_var = as.data.frame(VarCorr(model))['vcov'][2,]
  lm_df$within_var = as.data.frame(VarCorr(model))['vcov'][3,]
  lm_df$video_var_std = as.data.frame(VarCorr(model))['sdcor'][1,]
  lm_df$creator_var_std = as.data.frame(VarCorr(model))['sdcor'][2,]
  lm_df$within_var_std = as.data.frame(VarCorr(model))['sdcor'][3,]
  lm_df$n_all = summary(model)$devcomp$dims['N'][1]
  lm_df$n_video = summary(model)$ngrps[1]
  lm_df$n_creator = summary(model)$ngrps[2]
  # also calculate vpc: variance partitioning coefficient
  
  ## 
  lm_df$lci = confint(model, method='Wald')['interventionMO:prepost_v2post:moderationYes',][1]
  lm_df$uci = confint(model, method='Wald')['interventionMO:prepost_v2post:moderationYes',][2]
  
  
  lm_df$vpc_video = as.data.frame(VarCorr(model))['vcov'][1,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  lm_df$vpc_creator = as.data.frame(VarCorr(model))['vcov'][2,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  lm_df$vpc_within = as.data.frame(VarCorr(model))['vcov'][3,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  
  lm_df$type = 'moderator'
  lm_df$x = varx
  lm_df$y = vary
  lm_df$m = varm
  lm_df$groups = 'mo'
  
  
  # add the marginal effect
  mm_res_df0 = data.frame()
  for (i in 1:length(mod_c)){
    print(paste0(i,' done'))
    
    margin_no = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
                                                                 moderation = mod_c[i]))
    mm_df = data.frame(summary(margin_no))
    mm_df$m = varm
    mm_df$y = vary
    
    mm_res_df0 = rbind(mm_res_df0, mm_df)
    
    print(paste0(varx, '-', vary,'-',varm, ' done'))
    #write.csv(mm_res_df, 'tt_new_res_for_plot_0318_tmp3.csv', row.names = F)
  }
  
  return(list(lm = lm_df, mm = mm_res_df0))
}


dm3 <- dm2 %>%
  mutate(theme_label = ifelse(theme_any_bi=='Yes', "Video features toolkit themes", "Video does not feature toolkit themes"))

#df$theme_label <- factor(df$theme_label, levels = c("No Theme", "Theme"))

# Example marginal estimates data frame
# marginals <- data.frame(
#   theme_label = rep(c("No Theme", "Theme"), each = 2),
#   group = rep(c("Control", "Treatment"), 2),
#   estimate = c(...),  # your estimated values
#   lower = c(...),     # your lower CI
#   upper = c(...)      # your upper CI
# )

tl <- dm2 %>%
  group_by(video_ID) %>%
  select(theme_any_bi, prepost_v2, treatment, 
         issue_in_view,small_sample, video_ID) %>% distinct()

nl2 = dm2 %>%
  group_by(video_ID) %>% summarise(n=n(), across(c(kc1, kc2), mean, na.rm = TRUE)) 

tl = merge(tl, nl2, by='video_ID')

dm2s1 <- tl %>% filter(treatment=='MO') %>% filter(theme_any_bi=='Yes') %>% 
  filter(prepost_v2=='pre') %>% rename(kc1_pre = kc1, n_pre = n)
dm2s2 <- tl %>% filter(treatment=='MO') %>% filter(theme_any_bi=='Yes') %>% 
  filter(prepost_v2=='post') %>% rename(kc1_post = kc1, n_post = n)
merge(dm2s1, dm2s2, by='video_ID')


g = ggplot(mm_res, aes(x = moderation, y = AME, color = intervention)) +
  #geom_pointrange(aes(ymin = lower, ymax = upper), 
  #                position = position_dodge(width = 0.5), 
  #                size = 1.5, fatten = 2) +
  geom_errorbar(aes(ymin = lower, ymax = upper),
                position = position_dodge(width = 0.5),
                width = 0.07,     # width of the caps
                linewidth = 1  # thickness of the error bar lines
  ) +
  # Points
  geom_point(position = position_dodge(width = 0.5),
             size = 4) +
  scale_color_manual(values = c("MO" = "#E24C00", "Control" = "#333333")) + #c('#333333', '#E24C00', '#333333', '#E24C00')
  geom_hline(yintercept = 0, linetype = "dashed", color = "black", linewidth = 0.5, alpha=0.7) +
  
  labs(
    x = "Video features toolkit themes or not",
    y = "Average Marginal Effect",
    color = "Average Marginal Effect",
    title = "Differences in proportion of foundational KC by whether video features toolkit themes"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    #panel.grid.major.x = element_blank(),  # Remove major horizontal grid lines
    #panel.grid.minor.x = element_blank(),  # Remove minor horizontal grid lines
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Centered title
    axis.title = element_text(size = 13, face = "bold"),  
    axis.text = element_text(size = 12),  
    legend.text = element_text(size = 12),  
    legend.title = element_text(size = 12),
    panel.border = element_rect(color = "grey", fill = NA, linewidth = 0.5)
  )
g
ggsave(paste0("plot_video_smooth_", 'theme_any', ".png"), g, width = 10, height = 6, units = "in", dpi = 300)


## try the fancy plot
library(purrr)
library(ggridges)  # for ridge-style vertical densities

set.seed(123)

# Create helper function for bootstrapping within a subgroup

bootstrap_diff <- function(tl, n_boot = 5000) { 
  pre <- tl %>% filter(prepost_v2 == 'pre') %>% pull(kc1)
  post <- tl %>% filter(prepost_v2 == 'post') %>% pull(kc1)
  n <- min(length(pre), length(post))
  if (n == 0) return(tibble(diff = numeric(0)))
  
  map_dfr(1:n_boot, function(i) {
    pre_samp <- sample(pre, n, replace = TRUE)
    post_samp <- sample(post, n, replace = TRUE)
    tibble(diff = mean(post_samp - pre_samp))
  })
}

# Bootstrap across all 4 subgroups
boot_results <- tl %>%
  mutate(
    group_label = paste(treatment, theme_any_bi, sep = " | ")
  ) %>%
  group_by(group_label, treatment, theme_any_bi) %>%
  group_split() %>%
  map_dfr(~ {
    bs <- bootstrap_diff(.x)
    bs %>% mutate(
      group_label = unique(.x$group_label),
      treatment = unique(.x$treatment),
      theme_any_bi = unique(.x$theme_any_bi)
    )
  }, .id = "boot_id")
head(boot_results)

boot_results$group_label <- factor(
  boot_results$group_label,
  levels = c("Control | No", "MO | No", "Control | Yes", "MO | Yes")
)
boot_results2 = boot_results
boot_results2$group_label <- factor(
  boot_results2$group_label,
  levels = c("Control | No", "MO | No", "spacer", "Control | Yes", "MO | Yes")
)
boot_results2 <- bind_rows(
  boot_results2,
  tibble(group_label = "spacer", diff = NA)  # add one row so ggplot keeps the spacer tick
)
mm_res = mm_res%>%
  mutate(group_label = paste(intervention, moderation, sep = " | "))
grey_transparent <- rgb(105, 105, 105, alpha = 0.15 * 255, maxColorValue = 255)
darkorange_transparent <- rgb(255, 140, 0, alpha = 0.55 * 255, maxColorValue = 255)

g = ggplot(boot_results, aes(x = group_label, y = diff, width = after_stat(density), fill = group_label, color = group_label)) +
  geom_vridgeline(stat = "ydensity", trim = FALSE, alpha = 0.45, scale = 0.02) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_errorbar(
    data = mm_res,
    aes(x = group_label, ymin = lower, ymax = upper, color=intervention ),
    inherit.aes = FALSE,
    width = 0.1,
    linewidth = 0.8,
    color = c('#333333', '#E24C00', '#333333', '#E24C00')
  ) +
  geom_point(
    data = mm_res,
    aes(x = group_label, y = AME, color=intervention ),
    inherit.aes = FALSE,
    size = 2.5,
    shape = 21,
    fill = c('#333333', '#E24C00', '#333333', '#E24C00'),
    stroke = 1,
    color = c('#333333', '#E24C00', '#333333', '#E24C00')
  ) +
  
  scale_fill_manual(values = c(
    "Control | No" = grey_transparent,
    "Control | Yes" = grey_transparent,
    "MO | No" = darkorange_transparent,
    "MO | Yes" = darkorange_transparent,
    "Model estimate" = "white" 
  )) +
  scale_color_manual(values = c(
    "Control | No" = grey_transparent,
    "Control | Yes" = grey_transparent,
    "MO | No" = darkorange_transparent,
    "MO | Yes" = darkorange_transparent,
    "Model estimate" = "white" 
  ))+

  labs(
    x = "",
    y = "Change in the proportion of outcome in comments (Post-Pre)",
    title = "Differences in proportion of foundational KC by whether video features toolkit themes",
  ) +
   
  scale_x_discrete(labels = c(
    "Control | No" = "No themes\nControl",
    "MO | No" = "No themes\nMO",
    "Control | Yes" = "With themes\nControl",
    "MO | Yes" = "With theme\nMO",
    "Model estimate" = "white" 
  ))+
    theme_minimal(base_size = 12) +
      theme(
        #panel.grid.major.x = element_blank(),  # Remove major horizontal grid lines
        #panel.grid.minor.x = element_blank(),  # Remove minor horizontal grid lines
        plot.title = element_text(size = 13, face = "bold", hjust = 0.5),  # Centered title
        axis.title = element_text(size = 13, face = "bold"),  
        axis.text = element_text(size = 12),  
        legend.text = element_text(size = 12),  
        legend.title = element_text(size = 12),
        #legend.position = "none",
        panel.border = element_rect(color = "grey", fill = NA, linewidth = 0.5)
  
  )

ggsave(paste0("plot_video_smooth_", 'theme_any_full', ".png"), g, width = 10, height = 6, units = "in", dpi = 300)



### get the regression res
vary = 'kc1'
varx = 'treatment'
varm = 'c_engage'
summary(dm2$c_engage)
quantile(dm2$c_engage, probs = c(0.05, 0.25, 0.5, 0.75, 0.95), na.rm = TRUE)
quantile(dm2$ttfollow, probs = c(0.05, 0.25, 0.5, 0.75, 0.95), na.rm = TRUE)


type= 'all'
lm_res_df=data.frame()
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='all', lm_res_df, dm2)
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='theme_yes', lm_res_df, dm2=dm2%>% filter(theme_any_bi=='Yes'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='theme_no', lm_res_df, dm2=dm2%>% filter(theme_any_bi=='No'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='video_comment_yes', lm_res_df, dm2=dm2%>% filter(video_ctov=='Yes'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='video_comment_no', lm_res_df, dm2=dm2%>% filter(video_ctov=='No'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='video_share_yes', lm_res_df, dm2=dm2%>% filter(video_stov=='Yes'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='video_share_no', lm_res_df, dm2=dm2%>% filter(video_stov=='No'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='video_like_yes', lm_res_df, dm2=dm2%>% filter(video_ltov=='Yes'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='video_like_no', lm_res_df, dm2=dm2%>% filter(video_ltov=='No'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='creator_follow_b50_yes', lm_res_df, dm2=dm2%>% filter(follow_b50=='Yes'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='creator_follow_b50_no', lm_res_df, dm2=dm2%>% filter(follow_b50=='No'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='creator_licensed_yes', lm_res_df, dm2=dm2%>% filter(licensed=='Yes'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='creator_licensed_no', lm_res_df, dm2=dm2%>% filter(licensed=='No'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='creator_large_engage_yes', lm_res_df, dm2=dm2%>% filter(c_engage_bi=='Yes'))
lm_res_df = get_mlm_base_res4(vary='kc1', varx='treatment', type='creator_large_enage_no', lm_res_df, dm2=dm2%>% filter(c_engage_bi=='No'))
write.csv(lm_res_df, 'tt_new_res_for_plot_0318.csv', row.names = F)

mm_res_df = data.frame()
mm_res_df2 = data.frame()
mm_res_df3 = data.frame()
lm_res_df3 = data.frame()

lm_res_df2 = data.frame()
mod_c_engage = c(0.002, 0.005, 0.01, 0.02, 0.05)

mod_c_engage2 = c(min(dm2$c_engage), 0.001, 0.003, 0.004, 0.015, 0.025, 0.03, 0.04, max(dm2$c_engage))

mod_c_follow = c(5000,50000,100000, 500000, 1000000)
res = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='c_engage', 
                             lm_res_df=lm_res_df, mm_res_df=mm_res_df, mod_c=mod_c_engage, dm2=dm2)
res2 = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='c_engage', 
                             lm_res_df=lm_res_df, mm_res_df=mm_res_df, mod_c=mod_c_engage2, dm2=dm2)
res3 = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='c_engage', 
                              lm_res_df=lm_res_df3, mm_res_df=mm_res_df3, mod_c=unique(dm2$c_engage), dm2=dm2)
"lm_res_df = res$lm
mm_res_df = res$mm
res = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='ttfollow', 
                             lm_res_df=lm_res_df, mm_res_df=mm_res_df, mod_c=mod_c_follow, dm2=dm2)"
lm_res_df = res$lm
mm_res_df = res$mm
lm_res_df2 = res2$lm
mm_res_df2 = res2$mm
lm_res_df3 = res3$lm
mm_res_df3 = res3$mm
write.csv(mm_res_df3, 'tt_new_res_for_AME_plot_0321_2.csv', row.names = F)

res = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng1', 
                             lm_res_df=lm_res_df, mm_res_df=mm_res_df, 
                             mod_c=quantile(dm2$video_eng1, probs = c(0.05, 0.25, 0.5, 0.75, 0.95), na.rm = TRUE), dm2=dm2)
res2 = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng1', 
                             lm_res_df=lm_res_df2, mm_res_df=mm_res_df2, 
                             mod_c=quantile(dm2$video_eng1, probs = seq(0,1,0.1), na.rm = TRUE), dm2=dm2)
res3 = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng1', 
                              lm_res_df=lm_res_df3, mm_res_df=mm_res_df3, 
                              mod_c=quantile(dm2$video_eng1, probs = seq(0,1,0.005), na.rm = TRUE), dm2=dm2)
lm_res_df3 = res3$lm
mm_res_df3 = res3$mm
write.csv(mm_res_df, 'tt_new_res_for_AME_plot_0321_2.csv', row.names = F)

lm_res_df = res$lm
mm_res_df = res$mm
lm_res_df2 = res2$lm
mm_res_df2 = res2$mm
write.csv(mm_res_df2, 'tt_new_res_for_AME_plot_0321.csv', row.names = F)

res = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng2', 
                             lm_res_df=lm_res_df, mm_res_df=mm_res_df, 
                             mod_c=quantile(dm2$video_eng2, probs = c(0.05, 0.25, 0.5, 0.75, 0.95), na.rm = TRUE), dm2=dm2)
res2 = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng2', 
                              lm_res_df=lm_res_df2, mm_res_df=mm_res_df2, 
                              mod_c=quantile(dm2$video_eng2, probs = seq(0,1,0.1), na.rm = TRUE), dm2=dm2)
res3 = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng2', 
                              lm_res_df=lm_res_df3, mm_res_df=mm_res_df3, 
                              mod_c=quantile(dm2$video_eng2, probs = seq(0,1,0.01), na.rm = TRUE), dm2=dm2)
lm_res_df3 = res3$lm
mm_res_df3 = res3$mm
write.csv(mm_res_df3, 'tt_new_res_for_AME_plot_0321_2.csv', row.names = F)

lm_res_df = res$lm
mm_res_df = res$mm
lm_res_df2 = res2$lm
mm_res_df2 = res2$mm
res = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng3', 
                             lm_res_df=lm_res_df, mm_res_df=mm_res_df, 
                             mod_c=quantile(dm2$video_eng3, probs = c(0.05, 0.25, 0.5, 0.75, 0.95), na.rm = TRUE), dm2=dm2)
res2 = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng3', 
                              lm_res_df=lm_res_df2, mm_res_df=mm_res_df2, 
                              mod_c=quantile(dm2$video_eng3, probs = seq(0,1,0.1), na.rm = TRUE), dm2=dm2)
res3 = get_mlm_moderation_res(vary='kc1', varx='treatment', varm='video_eng3', 
                              lm_res_df=lm_res_df3, mm_res_df=mm_res_df3, 
                              mod_c=quantile(dm2$video_eng3, probs = seq(0,1,0.01), na.rm = TRUE), dm2=dm2)
lm_res_df3 = res3$lm
mm_res_df3 = res3$mm
write.csv(mm_res_df, 'tt_new_res_for_AME_plot_0321_3.csv', row.names = F)
write.csv(mm_res_df, 'tt_new_res_for_AME_plot_0321_4.csv', row.names = F)

lm_res_df = res$lm
mm_res_df = res$mm
lm_res_df2 = res2$lm
mm_res_df2 = res2$mm
write.csv(lm_res_df, 'tt_new_res_for_plot_0318_2.csv', row.names = F)
write.csv(mm_res_df, 'tt_new_res_for_AME_plot_0318.csv', row.names = F)

get_mlm_base_res4 <- function(vary, varx, type, lm_res_df, dm2){

  ## dm2 
  col_select_l = c(vary, varx, 'prepost_v2', 'creator_ID', 'video_ID')
  df = dm2 %>% dplyr::select(all_of(col_select_l))
  colnames(df) = c('y', 'intervention',  'prepost_v2', 'TTID', 'VID')
  
  model = lmer(formula = y ~ 1 + intervention*prepost_v2 + (1|TTID) + (1|TTID:VID), data = df)
  summary(model)
  #margin = margins(model, variables = "prepost_v2", at=list(intervention = int_l))
  
  #std_m = effectsize::standardize_parameters(model)
  lm_df = as.data.frame(summary(model)$coefficients)
  lm_df$var = row.names(lm_df)
  #lm_df = cbind(lm_df, data.frame(std_m)[,c('Std_Coefficient', 'CI_low', 'CI_high')])
  #lm_df['std_SE'] = attr(std_m, 'standard_error')
  
  lm_df$video_var = as.data.frame(VarCorr(model))['vcov'][1,]
  lm_df$creator_var = as.data.frame(VarCorr(model))['vcov'][2,]
  lm_df$within_var = as.data.frame(VarCorr(model))['vcov'][3,]
  lm_df$video_var_std = as.data.frame(VarCorr(model))['sdcor'][1,]
  lm_df$creator_var_std = as.data.frame(VarCorr(model))['sdcor'][2,]
  lm_df$within_var_std = as.data.frame(VarCorr(model))['sdcor'][3,]
  lm_df$n_all = summary(model)$devcomp$dims['N'][1]
  lm_df$n_video = summary(model)$ngrps[1]
  lm_df$n_creator = summary(model)$ngrps[2]
  
  ## 
  lm_df$lci = confint(model, method='Wald')['interventionMO:prepost_v2post',][1]
  lm_df$uci = confint(model, method='Wald')['interventionMO:prepost_v2post',][2]
  
  # also calculate vpc: variance partitioning coefficient
  lm_df$vpc_video = as.data.frame(VarCorr(model))['vcov'][1,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  lm_df$vpc_creator = as.data.frame(VarCorr(model))['vcov'][2,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  lm_df$vpc_within = as.data.frame(VarCorr(model))['vcov'][3,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  
  lm_df$type = type
  lm_df$x = varx
  lm_df$y = vary
  lm_df$m = 'NA'
  lm_df$groups = 'mo'
  
  lm_res_df = rbind(lm_res_df, lm_df)
  
  
  print(paste0(varx, '-', vary, '_', type,' done'))
  
  return(lm_res_df)
}

get_mlm_moderation_res <- function(vary, varx, varm, lm_res_df, mm_res_df, mod_c, dm2){
  
  
  ## dm2
  col_select_l = c(vary, varx, varm, 'prepost_v2', 'creator_ID', 'video_ID')
  df = dm2 %>% dplyr::select(all_of(col_select_l))
  colnames(df) = c('y', 'intervention',  'moderation','prepost_v2', 'TTID', 'VID')
  
  ## three level
  model = lmer(formula = y ~ 1 + intervention*prepost_v2*moderation + (1 |TTID) + (1|TTID:VID), data = df)
  #print(summary(model))
  #margin_no = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
  #                                                             moderation = c('No')))
  #margin_yes = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
  #                                                              moderation = c('Yes')))
  
  #std_m = effectsize::standardize_parameters(model)
  lm_df = as.data.frame(summary(model)$coefficients)
  #lm_df = cbind(lm_df, data.frame(std_m)[,c('Std_Coefficient', 'CI_low', 'CI_high')])
  #lm_df['std_SE'] = attr(std_m, 'standard_error')
  lm_df$var = row.names(lm_df)
  lm_df$video_var = as.data.frame(VarCorr(model))['vcov'][1,]
  lm_df$creator_var = as.data.frame(VarCorr(model))['vcov'][2,]
  lm_df$within_var = as.data.frame(VarCorr(model))['vcov'][3,]
  lm_df$video_var_std = as.data.frame(VarCorr(model))['sdcor'][1,]
  lm_df$creator_var_std = as.data.frame(VarCorr(model))['sdcor'][2,]
  lm_df$within_var_std = as.data.frame(VarCorr(model))['sdcor'][3,]
  lm_df$n_all = summary(model)$devcomp$dims['N'][1]
  lm_df$n_video = summary(model)$ngrps[1]
  lm_df$n_creator = summary(model)$ngrps[2]
  # also calculate vpc: variance partitioning coefficient
  
  ## 
  lm_df$lci = confint(model, method='Wald')['interventionMO:prepost_v2post:moderation',][1]
  lm_df$uci = confint(model, method='Wald')['interventionMO:prepost_v2post:moderation',][2]
  
  
  lm_df$vpc_video = as.data.frame(VarCorr(model))['vcov'][1,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  lm_df$vpc_creator = as.data.frame(VarCorr(model))['vcov'][2,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  lm_df$vpc_within = as.data.frame(VarCorr(model))['vcov'][3,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  
  lm_df$type = 'moderator'
  lm_df$x = varx
  lm_df$y = vary
  lm_df$m = varm
  lm_df$groups = 'mo'
  lm_res_df = rbind(lm_res_df, lm_df)
  
  
  # add the marginal effect
  for (i in 1:length(mod_c)){
    print(paste0(i,' done'))
  
  margin_no = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
                                                               moderation = mod_c[i]))
  mm_df = data.frame(summary(margin_no))
  mm_df$m = varm
  mm_df$y = vary
  
  mm_res_df = rbind(mm_res_df, mm_df)
  
  print(paste0(varx, '-', vary,'-',varm, ' done'))
  write.csv(mm_res_df, 'tt_new_res_for_plot_0318_tmp3.csv', row.names = F)
  }
  
  return(list(lm = lm_res_df, mm = mm_res_df))
}


get_mlm_moderation_res_sep <- function(vary, varx, varm, mod_c, dm2){
  
  
  ## dm2
  col_select_l = c(vary, varx, varm, 'prepost_v2', 'creator_ID', 'video_ID')
  df = dm2 %>% dplyr::select(all_of(col_select_l))
  colnames(df) = c('y', 'intervention',  'moderation','prepost_v2', 'TTID', 'VID')
  
  ## three level
  model = lmer(formula = y ~ 1 + intervention*prepost_v2*moderation + (1 |TTID) + (1|TTID:VID), data = df)
  #print(summary(model))
  #margin_no = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
  #                                                             moderation = c('No')))
  #margin_yes = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
  #                                                              moderation = c('Yes')))
  
  #std_m = effectsize::standardize_parameters(model)
  lm_df = as.data.frame(summary(model)$coefficients)
  #lm_df = cbind(lm_df, data.frame(std_m)[,c('Std_Coefficient', 'CI_low', 'CI_high')])
  #lm_df['std_SE'] = attr(std_m, 'standard_error')
  lm_df$var = row.names(lm_df)
  lm_df$video_var = as.data.frame(VarCorr(model))['vcov'][1,]
  lm_df$creator_var = as.data.frame(VarCorr(model))['vcov'][2,]
  lm_df$within_var = as.data.frame(VarCorr(model))['vcov'][3,]
  lm_df$video_var_std = as.data.frame(VarCorr(model))['sdcor'][1,]
  lm_df$creator_var_std = as.data.frame(VarCorr(model))['sdcor'][2,]
  lm_df$within_var_std = as.data.frame(VarCorr(model))['sdcor'][3,]
  lm_df$n_all = summary(model)$devcomp$dims['N'][1]
  lm_df$n_video = summary(model)$ngrps[1]
  lm_df$n_creator = summary(model)$ngrps[2]
  # also calculate vpc: variance partitioning coefficient
  
  ## 
  lm_df$lci = confint(model, method='Wald')['interventionMO:prepost_v2post:moderation',][1]
  lm_df$uci = confint(model, method='Wald')['interventionMO:prepost_v2post:moderation',][2]
  
  
  lm_df$vpc_video = as.data.frame(VarCorr(model))['vcov'][1,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  lm_df$vpc_creator = as.data.frame(VarCorr(model))['vcov'][2,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  lm_df$vpc_within = as.data.frame(VarCorr(model))['vcov'][3,] / (as.data.frame(VarCorr(model))['vcov'][1,]+as.data.frame(VarCorr(model))['vcov'][2,]+as.data.frame(VarCorr(model))['vcov'][3,])
  
  lm_df$type = 'moderator'
  lm_df$x = varx
  lm_df$y = vary
  lm_df$m = varm
  lm_df$groups = 'mo'
  
  
  # add the marginal effect
  mm_res_df = data.frame()
  for (i in 1:length(mod_c)){
    print(paste0(i,' done'))
    
    margin_no = margins(model, variables = "prepost_v2", at=list(intervention = c('Control', 'MO'),
                                                                 moderation = mod_c[i]))
    mm_df = data.frame(summary(margin_no))
    mm_df$m = varm
    mm_df$y = vary
    
    mm_res_df = rbind(mm_res_df, mm_df)
    
    print(paste0(varx, '-', vary,'-',varm, ' done'))
    #write.csv(mm_res_df, 'tt_new_res_for_plot_0318_tmp3.csv', row.names = F)
  }
  
  return(list(lm = lm_df, mm = mm_res_df))
}

small_res_print(vary='kc1', varx='treatment', dm2=dm2%>% filter(video_stov=='No'))
small_res_print(vary='kc1', varx='treatment', dm1)
small_res_print(vary='kc2', varx='treatment', dm2)
small_res_print(vary='kc2', varx='treatment', dm1)

VarCorr(model) %>%
  as_data_frame() %>%
  mutate(icc=vcov/sum(vcov)) %>%
  select(grp, icc)


x <- lm(mpg ~ cyl + hp * wt, data = mtcars)
margins(x)
library(marginaleffects)
avg_slopes(x)
dim(mtcars)

library(lme4)
model = lmer(formula = y ~ 1 + intervention*prepost_v2 + (1|TTID) + (1|TTID:VID), data = df)
summary(model)
class(model)
fixef(model)
